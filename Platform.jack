class Platform {
    static int initialX;

    field int tlx;
    field int tly;
    field int brx;
    field int bry;
    field int yHigh;
    field int yLow;
    field int speed;

    constructor Platform new() {
        let speed = 1;

        do reset();
        
        return this;
    }
    method void dispose() {
        do Memory.deAlloc(this);
		return;
    }
    method void update() {
        let tlx = tlx - speed;
        let brx = brx - speed;

        if ((tlx < 32) & (brx > -2)) {
            do Graphics.movePlatformToLeft(tlx, tly, brx, bry);
        }

        if (brx < -1) {         // reset if platform out of screen
            do reset();
        }

        return;
    }
    method void reset() {
        var int r;
        let r = LCGRandom.randRange(0, 3);
        if (r = 0) {
            let yLow = 20;
            let yHigh = 44;
        }

        if (r = 1) {
            let yLow = 84;
            let yHigh = 108;
        }

        if (r = 2) {
            let yLow = 148;
            let yHigh = 172;
        }

        if (r = 3) {
            let yLow = 212;
            let yHigh = 236;
        }

        let tly = LCGRandom.randRange(yLow, yHigh);
        let tlx = initialX;
        let brx = LCGRandom.randRange(tlx + 10, tlx + 40);
        let bry = tly + 3;

        return;
    }
    method int getTlx() {
        return tlx;
    }
    method int getTly() {
        return tly;
    }
    method int getBrx() {
        return brx;
    }
    method int getBry() {
        return bry;
    }
    function void setInitialX(int initial) {
        /*Set initial tlx for next platform*/
        let initialX = initial;
        return;
    }
    function int getHighestBrx(Platform pl0, Platform pl1, Platform pl2) {
        var int highestBrx;

        let highestBrx = pl0.getBrx();
        if (pl1.getBrx() > highestBrx) {
            let highestBrx = pl1.getBrx();
        }
        if (pl2.getBrx() > highestBrx) {
            let highestBrx = pl2.getBrx();
        }

        return highestBrx;
    }
}
